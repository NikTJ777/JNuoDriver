#
#  JNuoTest properties
#

# properties.path can be set on the command-line to point to a different location for this file
#
# properties.path=file:///a/b/c.properties

# Average rate of work to maintain (in events per second) - can be less than 1.
# 0 => do not try to maintain an average work rate
# >0 => adjust work submission rate by sleeping less or more between submit cycles.
# Ex: average.rate=0.25 means the average work will be adjusted to 0.25 events per second = 1 event every 4 seconds.
# Ex: average.rate = 5 means the average work will be adjusted to 5 events per second = 1 event every 0.2 seconds.
#
# average.rate=0.25

# maximum number of queued tasks.
# Setting this > 0 causes the work rate to be adjusted so the backlog is kept at or below this level.
# This is useful for determining the maximum work rate that can be sustained on a particular configuration
#
maxQueued=1

# number of executor threads to use to execute the work
#
thread.count=1

# location of the database properties file (may be a separate file on disk)
#
# db.properties.path=classpath://properties/Database.properties

# number of seconds to run the test
#
run.time=30

# min, max groups per event
#
min.groups = 1
max.groups = 5

# min,max data records (inserts) per event
#
min.data=500
max.data=3500

# burst probability percentage - between 0.0 (never) and 100.0 (always)
#
burst.probability.percentage=0

# minimum and maximum size of burst
#
min.burst.count=5
max.burst.count=10

# Which mode to use when committing the bulk updates
#
# valid values are: BATCH | TRANSACTIONAL | AUTO_COMMIT
# @see com.nuodb.sales.jnuotest.dao.SqlSession#Mode
#
bulk.commit.mode=BATCH

# SQL script to execute to initialise the database
#
db.init.sql=DROP PROCEDURE NuoTest.InsertData IF EXISTS@\
            DROP TABLE NuoTest.T_OWNER IF EXISTS@\
            DROP TABLE NuoTest.T_EVENT IF EXISTS@\
            DROP TABLE NuoTest.T_GROUP IF EXISTS@\
            DROP TABLE NuoTest.T_DATA IF EXISTS@\
            create table NuoTest.T_OWNER (id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, name STRING, masterAliasId BIGINT)@\
            create table NuoTest.T_EVENT (id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, ownerId BIGINT, name STRING, description STRING, date DATE)@\
            create table NuoTest.T_GROUP (id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, eventId BIGINT, name STRING, description STRING, dataCount INTEGER, date DATE)@\
            create table NuoTest.T_DATA (id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, groupId BIGINT, instanceUID STRING, name STRING, description STRING, path STRING, active SMALLINT)@\
            create procedure NuoTest.InsertData ($groupId BIGINT, $instanceUID STRING, $name STRING, $description STRING, $path STRING)\n\
                RETURNS value(record STRING)\n\
                AS\n\
                    VAR $dataId BIGINT;\n\
                    VAR $active SMALLINT;\n\
                    $dataId = (SELECT id from NuoTest.T_DATA where groupId = $groupId AND instanceUID = $instanceUID AND active = '1');\n\
                    IF (LENGTH(IFNULL($dataId, '')))\n\
                        INSERT into NuoTest.T_DATA (groupId, instanceUID, name, description, path, active) \
                            VALUES ($groupId, $instanceUID, $name, $description, $path, 1);\n\
                    ELSE\n\
                        INSERT INTO NuoTest.T_DATA (groupId, instanceUID, name, description, path, active)\n\
                            VALUES ($groupId, $instanceUID, $name, $description, $path, 0);\n\
                    END_IF;\n\
                    INSERT INTO value VALUES($dataId);\n\
                END_PROCEDURE;
