#
#  JNuoTest properties
#

# properties.path can be set on the command-line to point to a different location for this file
#
# properties.path=file:///a/b/c.properties

# Average rate of work to maintain (in events per second) - can be less than 1.
# 0 => do not try to maintain an average work rate
# >0 => adjust work submission rate by sleeping less or more between submit cycles.
# Ex: average.rate=0.25 means the average work will be adjusted to 0.25 events per second = 1 event every 4 seconds.
# Ex: average.rate = 5 means the average work will be adjusted to 5 events per second = 1 event every 0.2 seconds.
#
# timing.rate=0.25

# Time between insert and view.
# 0 => do not schedule a view of each newly inserted event
#
# timing.min.view.delay = 300
# timing.max.view.delay = 2400

#Time speedup - multiplier to speed up the above timing parameters
# 0 or 1 => no speedup - the code runs at real-world pace
# Ex: 2 => 2x speedup - the code runs as 2x real-world => 2x timing.average.rate; 0.5x timing.view.after.insert
#
# This is useful to achieve scaled results faster; and to confirm headroom ex: "Can we handle 2x current load?"
#
# timing.speedup = 1

# maximum number of queued tasks.
# Setting this >= 0 causes the work rate to be adjusted so the backlog is kept at or below this level.
# This is useful for determining the maximum work rate that can be sustained on a particular configuration.
#
# Setting this to -1 disables the dynamic workload adjustment, and the work will be clamped to the specified work rate.
#
max.queued=0

# number of executor threads to use to execute inserts
#
insert.threads=1

# number of executor threads to use to execute queries
#
query.threads = 1

# location of the database properties file (may be a separate file on disk)
#
# db.properties.path=classpath://properties/Database.properties

# number of seconds to run the test
#
run.time=30

# min, max groups per event
#
min.groups = 1
max.groups = 5

# min,max data records (inserts) per event
#
min.data=500
max.data=3500

# burst probability percentage - between 0.0 (never) and 100.0 (always)
#
burst.probability.percent=0

# minimum and maximum size of burst
#
min.burst=5
max.burst=10

# Which mode to use when committing the bulk updates
#
# valid values are: BATCH | TRANSACTIONAL | AUTO_COMMIT
# @see com.nuodb.sales.jnuotest.dao.SqlSession#Mode
#
bulk.commit.mode=BATCH

# flag to initialise database
#
db.init=false

# schema to be used for the database
#
schema=NuoTest

# SQL script to execute to initialise the database
#
db.init.sql=DROP PROCEDURE ${schema}.InsertData IF EXISTS@\n\
            DROP INDEX ${schema}.groupLookup IF EXISTS@\n\
            DROP INDEX ${schema}.eventLookup IF EXISTS@\n\
            DROP TABLE ${schema}.T_OWNER IF EXISTS@\n\
            DROP TABLE ${schema}.T_EVENT IF EXISTS@\n\
            DROP TABLE ${schema}.T_GROUP IF EXISTS@\n\
            DROP TABLE ${schema}.T_DATA IF EXISTS@\n\
            create table ${schema}.T_OWNER (id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY, name STRING, masterAliasId BIGINT)@\n\
            create table ${schema}.T_EVENT (id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY, ownerId BIGINT, name STRING, description STRING, date DATE)@\n\
            create table ${schema}.T_GROUP (id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY, eventId BIGINT, name STRING, description STRING, dataCount INTEGER, date DATE)@\n\
            create table ${schema}.T_DATA (id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY, groupId BIGINT, instanceUID STRING, name STRING, description STRING, path STRING, active SMALLINT)@\n\
            CREATE INDEX groupLookup on ${schema}.T_DATA (groupId)@\n\
            CREATE INDEX eventLookup on ${schema}.T_GROUP (eventId)@\n\
            create procedure ${schema}.InsertData ($groupId BIGINT, $instanceUID STRING, $name STRING, $description STRING, $path STRING)\n\
                RETURNS value(record STRING)\n\
                AS\n\
                    VAR $dataId BIGINT;\n\
                    VAR $active SMALLINT;\n\
                    $dataId = (SELECT id from ${schema}.T_DATA where groupId = $groupId AND instanceUID = $instanceUID AND active = '1');\n\
                    IF (LENGTH(IFNULL($dataId, '')))\n\
                        INSERT into ${schema}.T_DATA (groupId, instanceUID, name, description, path, active) \
                            VALUES ($groupId, $instanceUID, $name, $description, $path, 1);\n\
                    ELSE\n\
                        INSERT INTO ${schema}.T_DATA (groupId, instanceUID, name, description, path, active)\n\
                            VALUES ($groupId, $instanceUID, $name, $description, $path, 0);\n\
                    END_IF;\n\
                    INSERT INTO value VALUES($dataId);\n\
                END_PROCEDURE;
