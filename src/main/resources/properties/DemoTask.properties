#  Task.properties
#
# Set the parameters for a particular task

task.name=DemoTask

# Average rate of work to maintain (in events per second) - can be less than 1.
# 0 => do not try to maintain an average work rate
# >0 => adjust work submission rate by sleeping less or more between submit cycles.
# Ex: average.rate=0.25 means the average work will be adjusted to 0.25 events per second = 1 event every 4 seconds.
# Ex: average.rate = 5 means the average work will be adjusted to 5 events per second = 1 event every 0.2 seconds.
#
timing.rate=4

# update task details #

# fully-qualified name of the class of the Task object
# Default is the built-in generic task class com.nuodb.sales.jnuodriver.GenericTask
#
#update.task.class =

# SQL to be used for the update tasks.
# Each statement (terminated by a semicolon) represents a discrete operation.
# The GenericTask uses these - and a custom Task could also.
#
db.update.sql = INSERT INTO TABLE1 (count, description, seq) VALUES (?, ?, ?);\n\
                INSERT INTO TABLE2 (count, name, unique) VALUES (?, ?, ?);\n\
                INSERT INTO TABLE3 (sku, onHand, mfrId) VALUES (?, ?, ?);

# Definition of data to feed to the task.
# One line per SQL statement above.
# Can be:
#     file:// url;
#     format:// followed by format string (with additions, such as '~' meaning random value).
#     internal://  specifying the data is provided internally by the program.
#
db.update.values = format://%~1-100$d, Generated for-%3$s, %#$d\n\
                 format://%#$d, Table1-%~5$s, %#$d\n\
                 file://./test.csv

# query task details #

# fully-qualified class name of the query task.
# Same default as update.task.class.
#
#query.task.class =

# SQL to be used for the query task.
# Each statement (terminated by a semicolon) represents a discrete operation.
# The GenericTask uses these - and a custom Task class could as well.
#
db.query.sql = SELECT count, description, unique FROM TABLE1 where id = ?;\n\
               SELECT * FROM TABLE2 WHERE count > ?;\n\
               SELECT sku, onHand from TABLE3 WHERE mfrId = ? and sku = ?;

# Definition of the data to feed to the query sql.
# Each line corresponds to an SQL statement above.
#
db.query.values = format://%#$d\n\
                format://%~1-100$d\n\
                file://./test1.csv

# Time between insert and view.
# 0 => do not schedule a view of each newly inserted event
#
timing.min.view.delay = 0
timing.max.view.delay = 0

# maximum retries on DB exception
#
max.retry = 3

# maximum number of queued tasks.
# Setting this >= 0 causes the work rate to be adjusted so the backlog is kept at or below this level.
# This is useful for determining the maximum work rate that can be sustained on a particular configuration.
#
# Setting this to -1 disables the dynamic workload adjustment, and the work will be clamped to the specified work rate.
#
max.queued=0

# number of executor threads to use to execute inserts
#
update.threads=1

# number of executor threads to use to execute queries
#
query.threads = 1

# min, max hierarchy fanout
#
min.fanout = 1
max.fanout = 5

# min,max data leaf records (inserts) per event
#
min.leaves=2000
max.leaves=4000

# burst probability percentage - between 0.0 (never) and 100.0 (always)
#
burst.probability.percent=0

# minimum and maximum size of burst
#
min.burst=5
max.burst=10

# which transaction model to use for each Event
#
# valid values are DISCRETE | UNIFIED
#
tx.model=UNIFIED

# which mode to use when communicating with the database
#
# valid values are: SQL | CALL | STORED_PROCEDURE
#
communication.mode=STORED_PROCEDURE

# standard prefix for STORED PROCEDURE names
#
sp.name.prefix=importer_

# Which mode to use when committing the bulk updates
#
# valid values are: BATCH | TRANSACTIONAL | AUTO_COMMIT
# @see com.nuodb.sales.jnuodriverer.dao.SqlSession#Mode
#
bulk.commit.mode=BATCH

# isolation mode to use for update operations
#
update.isolation=CONSISTENT_READ

# type of connection to use
#
# types are defined in the db.connection.@list.names property (typically defined in the database.properties file)
connection.type =

# SQL script to execute to initialise the database
#
# This can be a multi-line property - add a trailing '\' to each line except the last.
# Terminate each individual command with an ';'.
# This allows for multi-line and multi-statement commands, such as 'CREATE PROCEDURE'
#
db.init.sql=DROP PROCEDURE ${db.schema}.${sp.name.prefix}InsertOwner IF EXISTS;\n\
            DROP PROCEDURE ${db.schema}.${sp.name.prefix}InsertEvent IF EXISTS;\n\
            DROP PROCEDURE ${db.schema}.${sp.name.prefix}InsertGroup IF EXISTS;\n\
            DROP PROCEDURE ${db.schema}.${sp.name.prefix}InsertData IF EXISTS;\n\
            DROP PROCEDURE ${db.schema}.${sp.name.prefix}UpdateGroup IF EXISTS;\n\
            DROP INDEX ${db.schema}.groupLookup IF EXISTS;\n\
            DROP INDEX ${db.schema}.eventLookup IF EXISTS;\n\
            DROP TABLE ${db.schema}."OWNER" IF EXISTS;\n\
            DROP TABLE ${db.schema}."EVENT" IF EXISTS;\n\
            DROP TABLE ${db.schema}."GROUP" IF EXISTS;\n\
            DROP TABLE ${db.schema}."DATA" IF EXISTS;\n\
            SET SYSTEM PROPERTY MAX_CONNECTION_OPEN_STATEMENTS=15000;\n\
            SET SYSTEM PROPERTY MAX_CONNECTION_OPEN_RESULTSETS=15000;\n\
            create table ${db.schema}."OWNER" (id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY, customerId BIGINT, ownerGuid STRING, dateCreated DATE, lastUpdated DATE, name STRING, masterAliasId BIGINT, region STRING);\n\
            create table ${db.schema}."EVENT" (id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY, customerId BIGINT, ownerId BIGINT, eventGuid STRING, name STRING, description STRING, dateCreated DATE, lastUpdated DATE, region STRING);\n\
            create table ${db.schema}."GROUP" (id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY, eventId BIGINT, groupGuid STRING, description STRING, dataCount INTEGER, dateCreated DATE, lastUpdated DATE, region STRING, week BIGINT);\n\
            create table ${db.schema}."DATA"  (id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY, groupId BIGINT, dataGuid String, instanceUID STRING, createdDateTime TIMESTAMP(0), acquiredDateTime TIMESTAMP(0), version INT, active BOOLEAN, sizeOnDiskMB DECIMAL(6,2), regionWeek STRING);\n\
            CREATE INDEX groupLookup on ${db.schema}."DATA" (groupId);\n\
            CREATE INDEX eventLookup on ${db.schema}."GROUP" (eventId);\n\
            create procedure ${db.schema}.${sp.name.prefix}InsertOwner (OUT "@id" BIGINT, $customerId BIGINT, $ownerGuid STRING, $createdDate DATE, $lastUpdated DATE, $name STRING, $masterAliasId BIGINT, $region STRING)\n\
                AS\n\
                    VAR $ownerId BIGINT = (SELECT id from ${db.schema}."OWNER" where customerId = $customerId AND ownerGuid = $ownerGuid);\n\
                    IF ($ownerId IS NULL)\n\
                        FOR INSERT into ${db.schema}."OWNER" (customerId, ownerGuid, dateCreated, lastUpdated, name, masterAliasId, region)\n\
                            VALUES ($customerId, $ownerGuid||'-SP', NOW(), NOW(), $name, $masterAliasId, $region);\n\
                            "@id" = id;\n\
                        END_FOR;\n\
                    ELSE\n\
                        UPDATE ${db.schema}."OWNER" SET lastUpdated = (NOW()) where id = $ownerId;\n\
                        "@id" = $ownerId;\n\
                    END_IF;\n\
                END_PROCEDURE;\n\
            create procedure ${db.schema}.${sp.name.prefix}InsertEvent (OUT "@id" BIGINT, $customerId BIGINT, $ownerId BIGINT, $eventGuid STRING, $name STRING, $description STRING, $createdDate DATE, $lastUpdated DATE, $region STRING)\n\
                AS\n\
                    VAR $eventId BIGINT = (SELECT id from ${db.schema}."EVENT" where customerId = $customerId AND ownerId = $ownerId AND eventGuid = $eventGuid);\n\
                    IF ($eventId IS NULL)\n\
                        FOR INSERT into ${db.schema}."EVENT" (customerId, ownerId, eventGuid, name, description, dateCreated, lastUpdated, region)\n\
                            VALUES ($customerId, $ownerId, $eventGuid||'-SP', $name, $description, NOW(), NOW(), $region);\n\
                            "@id" = id;\n\
                        END_FOR;\n\
                    ELSE\n\
                        UPDATE ${db.schema}."EVENT" SET lastUpdated = (NOW()) where id = $ownerId;\n\
                        "@id" = $eventId;\n\
                    END_IF;\n\
                END_PROCEDURE;\n\
            create procedure ${db.schema}.${sp.name.prefix}InsertGroup (OUT "@id" BIGINT, $eventId BIGINT, $groupGuid STRING, $description STRING, $dataCount INT, $dateCreated DATE, $lastUpdated DATE, $region STRING, $week BIGINT)\n\
                AS\n\
                    VAR $groupId BIGINT = (SELECT id from ${db.schema}."GROUP" where eventId = $eventId AND groupGuid = $groupGuid);\n\
                    IF ($groupId IS NULL)\n\
                        FOR INSERT into ${db.schema}."GROUP" (eventId, groupGuid, description, dataCount, dateCreated, lastUpdated, region, week)\n\
                            VALUES ($eventId, $groupGuid||'-SP', $description, $dataCount, NOW(), NOW(), $region, $week);\n\
                            "@id" = id;\n\
                        END_FOR;\n\
                    ELSE\n\
                        UPDATE ${db.schema}."GROUP" SET lastUpdated = (NOW()) where id = $groupId;\n\
                        "@id" = $groupId;\n\
                    END_IF;\n\
                END_PROCEDURE;\n\
            create procedure ${db.schema}.${sp.name.prefix}InsertData (OUT "@id" BIGINT, $groupId BIGINT, $dataGuid STRING, $instanceUID STRING, $createdDateTime TIMESTAMP, $acquiredDateTime TIMESTAMP, $version INT, $active BOOLEAN, $sizeOnDiskMB DECIMAL, $regionWeek STRING)\n\
                AS\n\
                    VAR $dataId BIGINT;\n\
                    VAR $currVersion DECIMAL;\n\
                    $dataId, $currVersion = (SELECT id, version from ${db.schema}."DATA" where groupId = $groupId AND dataGuid = $dataGuid AND active = '1');\n\
                    //$dataId = NULL;\n\
                    IF ($dataId IS NULL)\n\
                        INSERT into ${db.schema}."DATA" (groupId, dataGuid, instanceUID, createdDateTime, acquiredDateTime, version, active, sizeOnDiskMB, regionWeek)\n\
                            VALUES ($groupId, $dataGuid||'-SP', $instanceUID, $createdDateTime, $acquiredDateTime, 1, 1, $sizeOnDiskMB, $regionWeek);\n\
                    ELSE\n\
                        IF ($currVersion < 255)\n\
                            INSERT into ${db.schema}."DATA" (groupId, dataGuid, instanceUID, createdDateTime, acquiredDateTime, version, active, sizeOnDiskMB, regionWeek)\n\
                                VALUES ($groupId, $dataGuid, $instanceUID, $createdDateTime, $acquiredDateTime, $currVersion + 1, 0, $sizeOnDiskMB, $regionWeek);\n\
                        ELSE\n\
                            UPDATE ${db.schema}."DATA" SET instanceUID = $instanceUID WHERE id = $dataId;\n\
                        END_IF;\n\
                    END_IF;\n\
                END_PROCEDURE;\n\
			create procedure ${db.schema}.${sp.name.prefix}UpdateGroup ("@id" BIGINT, $dataCount INT)\n\
                AS\n\
					UPDATE ${db.schema}."GROUP" SET dataCount = $dataCount WHERE id = "@id";\n\
                END_PROCEDURE
